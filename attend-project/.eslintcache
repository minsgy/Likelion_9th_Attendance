[{"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/schedule_reducer.js":"1","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/App.js":"2","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainPanel.js":"3","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideFooter.js":"4","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainList.js":"5","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/AttendList.js":"6","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/schedule_action.js":"7","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/auth_reducer.js":"8","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/index.js":"9","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SidePanel.js":"10","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/auth_action.js":"11","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/AuthPage/AuthPage.js":"12","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPage.js":"13","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/index.js":"14","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/types.js":"15","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/firebase.js":"16","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideHeader.js":"17","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideList.js":"18","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainHeader.js":"19"},{"size":612,"mtime":1611210694488,"results":"20","hashOfConfig":"21"},{"size":507,"mtime":1611299213580,"results":"22","hashOfConfig":"21"},{"size":1335,"mtime":1611300911037,"results":"23","hashOfConfig":"21"},{"size":418,"mtime":1611317721883,"results":"24","hashOfConfig":"21"},{"size":4824,"mtime":1611322514142,"results":"25","hashOfConfig":"21"},{"size":7070,"mtime":1611302710996,"results":"26","hashOfConfig":"21"},{"size":332,"mtime":1611210844496,"results":"27","hashOfConfig":"21"},{"size":443,"mtime":1611300427529,"results":"28","hashOfConfig":"21"},{"size":944,"mtime":1611377438767,"results":"29","hashOfConfig":"21"},{"size":377,"mtime":1610785972678,"results":"30","hashOfConfig":"21"},{"size":211,"mtime":1611292438195,"results":"31","hashOfConfig":"21"},{"size":2437,"mtime":1611305343986,"results":"32","hashOfConfig":"21"},{"size":3839,"mtime":1611305087122,"results":"33","hashOfConfig":"21"},{"size":212,"mtime":1611292615746,"results":"34","hashOfConfig":"21"},{"size":159,"mtime":1611292760188,"results":"35","hashOfConfig":"21"},{"size":563,"mtime":1610781582091,"results":"36","hashOfConfig":"21"},{"size":985,"mtime":1611228212459,"results":"37","hashOfConfig":"21"},{"size":11490,"mtime":1611213848873,"results":"38","hashOfConfig":"21"},{"size":542,"mtime":1611227271400,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sqdhbq",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/schedule_reducer.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/App.js",[],["84","85"],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainPanel.js",["86","87","88"],"import React, { useState } from 'react';\nimport MainHeader from './MainHeader';\nimport MainList from './MainList';\nimport { useSelector } from 'react-redux';\nimport firebase from '../../../firebase'\nimport renderEmpty from 'antd/lib/config-provider/renderEmpty';\nimport AttendList from './AttendList';\n\n\nconst MainPanel = () => {\n\n    // const [AttendanceRef, setAttendanceRef] = useState(firebase.database().ref(\"Attendance\"))\n    // const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\"))\n    // const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\"))\n\n    // null일 시, MainHeader 및 MainList 안보이게함.\n    const schedule = useSelector(state => state.schedule.currentSchedule)\n    // const auth = useSelector(state => state.auth.currentAuth)\n    return (\n        <main style={{ display: 'flex', flexDirection: 'column' }}>\n            {\n                schedule ?\n                    <>\n                        < MainHeader />\n                        <MainList />\n                    </>\n                    :\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n                        <AttendList />\n                    </div>\n            }\n\n        </main >\n    );\n}\n\nexport default MainPanel;\n",["89","90"],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideFooter.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainList.js",["91","92","93","94","95","96","97","98","99","100"],"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport firebase from '../../../firebase';\nimport Table from 'react-bootstrap/Table';\n\n\n\nconst MainList = () => {\n\n    const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\").orderByChild('Class'));\n    const [Users, setUsers] = useState([]);\n    const [SearchUser, setSearchUser] = useState([]);\n\n    const [AttendanceRef, setAttendanceRef] = useState(firebase.database().ref(\"Attendance\"))\n    const [SearchAttendRef, setSearchAttendRef] = useState(firebase.database())\n    const [IsLoadingState, setIsLoadingState] = useState(false);\n    // Attendance(출석체크 모델의 경우, 단순하게 스케쥴 아이디 값을 저장해서 나타내는 것이 목표.)\n    const schedule = useSelector(state => state.schedule.currentSchedule)\n\n    const addUserListeners = async () => {\n        let UsersArray = [];\n        await UserRef.on('child_added', DataSnapshot => {\n            UsersArray.push(DataSnapshot.val())\n            setUsers(UsersArray)\n        })\n    }\n\n    // 폼 확인\n    const isFormVaild = (user, schedule, value) =>\n        user && schedule && value\n\n    // Onchange를 통해서 선택 시, 바로 파이어베이스 업데이트\n    const handleAttend = async (user, schedule, value) => {\n        if (isFormVaild(user, schedule, value)) {\n            const newAttendance = {\n                user_id: user.id, // 연결 된 유저\n                schedule_id: schedule.id, // 연결된 스케줄\n                state: value // 상태\n            }\n            try {\n                // 스케줄 -> 유저이름으로 구분하여, 업데이트\n                await AttendanceRef.child(`${schedule.id}/${user.Username}`).update(newAttendance)\n                // 저거 자체 SearchUser 넣을려했더니 무한로딩 되서 하나 로딩만듬\n                if (IsLoadingState)\n                    setIsLoadingState(false)\n                else\n                    setIsLoadingState(true)\n            } catch (error) {\n                alert(error)\n            }\n        } else {\n            alert(\"스케줄을 다시 선택해주세요.\")\n        }\n    }\n\n    // 해당 맞는 스케줄/유저의 상태 값 \n    const SearchState = async () => {\n        const searchuser = []\n        await SearchAttendRef.ref(`Attendance/${schedule.id}`).on('child_added', DataSnapshot => {\n            searchuser.push(DataSnapshot.val())\n            setSearchUser(searchuser)\n        })\n    }\n    \n    const renderUserList = (Users) =>\n\n        Users.length > 0 &&\n        Users.map(user => (\n            <tr key={user.id}>\n                <td>{user.Class}</td>\n                <td>{user.Username}</td>\n                <td>{user.Department}</td>\n                <td>{user.Callnumber}</td>\n                <td>\n                    <form>\n                        출석<input style={{ marginRight: '1rem' }} type='radio' name={user.id} value='출석' onChange={(e) => (handleAttend(user, schedule, e.target.value))} />\n                            지각<input style={{ marginRight: '1rem' }} type='radio' name={user.id} value='지각' onChange={(e) => (handleAttend(user, schedule, e.target.value))} />\n                            결석<input type='radio' name={user.id} value='결석' onChange={(e) => (handleAttend(user, schedule, e.target.value))} />\n                    </form>\n                </td>\n                {SearchUser.map(searchUser => (\n                    (searchUser.user_id === user.id && searchUser.schedule_id === schedule.id) &&\n                    <td style={{ color: (searchUser.state === \"결석\" && \"red\" || searchUser.state === \"지각\" && \"orange\" || searchUser.state === \"출석\" && \"blue\") }}>{searchUser.state}</td>\n                ))}\n            </tr >\n        ))\n\n\n    // 계속 실행\n    useEffect(() => {\n        addUserListeners();\n        SearchState();\n    }, [schedule, IsLoadingState])  // schedule 변경시 값 가져오고, state 값 설정 시 실행된다.\n    // 이게 있어야 값이 바뀌면서 갱신 된다..^^\n\n    return (\n        <div className=\"MainList\" style={{ height: '500px', overflow: 'auto' }}>\n            <Table hover responsive size=\"lg\">\n                <thead style={{ fontSize: '20px' }}>\n                    <tr>\n                        <th >학번</th>\n                        <th >이름</th>\n                        <th >학과</th>\n                        <th >전화 번호</th>\n                        <th >출석 여부</th>\n                        <th >출석 상태</th>\n                    </tr>\n                </thead>\n                <tbody style={{ fontSize: '15px' }}>\n                    {renderUserList(Users)}\n                </tbody>\n            </Table>\n\n        </div >\n    );\n}\n\nexport default MainList;\n","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/AttendList.js",["101","102","103","104","105","106","107","108","109","110","111","112"],"import React, { useState, useEffect } from 'react';\nimport firebase from '../../../firebase';\n\nconst AttendList = () => {\n    // 데이터베이스 ref\n    const [AttendanceRef, setAttendanceRef] = useState(firebase.database().ref(\"Attendance\"))\n    const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\"))\n    const [ScheduleRef, setScheduleRef] = useState(firebase.database().ref(\"Schedule\"))\n\n    const [Schedule, setSchedule] = useState([]);\n    const [User, setUser] = useState([]);\n    const [Attendance, setAttendance] = useState([]);\n\n    const [isReLoadingList, setisReLoadingList] = useState(false);\n\n    const addUserListeners = async () => {\n        let UsersArray = [];\n        await UserRef.on('child_added', DataSnapshot => {\n            UsersArray.push(DataSnapshot.val())\n            setUser(UsersArray)\n        })\n    }\n\n    const addAttendanceListeners = async () => {\n        let AttendanceArray = [];\n        await AttendanceRef.on('child_added', DataSnapshot => {\n            AttendanceArray.push(DataSnapshot.val())\n\n\n            setAttendance(AttendanceArray)\n        })\n    }\n\n    const addScheduleListeners = async () => {\n        let ScheduleArray = [];\n        await ScheduleRef.on('child_added', DataSnapshot => {\n            ScheduleArray.push(DataSnapshot.val())\n            ScheduleArray.sort(function (a, b) {\n                return parseInt(a.day) - parseInt(b.day)\n            })\n            ScheduleArray.sort(function (a, b) {\n                return parseInt(a.month) - parseInt(b.month)\n            })\n            ScheduleArray.sort(function (a, b) {\n                return parseInt(a.year) - parseInt(b.year)\n            })\n            setSchedule(ScheduleArray)\n        })\n    }\n\n    useEffect(() => {\n\n        addScheduleListeners();\n        addAttendanceListeners();\n        addUserListeners();\n\n    }, [isReLoadingList]);\n\n\n\n    // schedules\n    const renderScheduleList = (schedules) =>\n        // Attendance.map(attend => console.log(attend['강민서'].schedule_id))\n        schedules.length > 0 &&\n        schedules.map((schedule) => (\n            <li className=\"Header_list\">{schedule.month}/{schedule.day}</li>\n            // <th style={{ width: '50px', padding: '5px 0', borderBottom: '2px solid #e4e4e4' }}>{schedule.month}/{schedule.day}</th>\n        )) || <div> 스케줄이 없어서 출력 할 수 없습니다.</div>\n\n    const renderUserStateList = (user) =>\n        user.length > 0 && Schedule.length > 0 && user.map(user => (\n            <ul className=\"List_Container\">\n                <li className=\"UserList\" >{user.Username}</li>\n                {/* <td style={{ height: '50px', width: '100px', display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%', fontWeight: '600', borderBottom: '2px solid #e4e4e4' }}>{user.Username}</td> */}\n                {/* 스케줄 모델은 정렬된 상태이므로, 그 해당 td에 맞게 상태 검사를 한다. 2중 반복문 원리를 이용함. */}\n                {\n                    Schedule.map((schedule) =>\n                        // 치명적인 논리 오류. Attendance의 객체 값만큼 반복하게 됨. 그래서 중간에 출석 체크 안되있으면 다 망가짐.\n                        // 출석체크 했을 때만, Attendance 객체가 생성 되도록 했기 때문..\n                        Attendance.map((attend) => {\n                            return (\n                                attend[user.Username]?.schedule_id === schedule.id &&\n                                <li className=\"UserList\" style={{\n                                    backgroundColor: (\n                                        attend[user.Username].state === '결석' && \"#FF3232\"\n                                        || attend[user.Username].state === '지각' && \"#FFD732\"\n                                        || attend[user.Username].state === '출석' && \"#FFFF8C\"\n                                    )\n                                }}>\n                                    {\" \"}\n                                </li>\n                            )\n                        })\n                    )\n                }\n            </ul>\n        ))\n\n\n    return (\n        <>\n            <header style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '70%' }}>\n                <div style={{ color: 'white', backgroundColor: 'black', padding: '3px 8px', borderRadius: '30px' }} onClick={() => {\n                    if (isReLoadingList) {\n                        setisReLoadingList(false)\n                    }\n                    else {\n                        setisReLoadingList(true)\n                    }\n                }}>리스트 새로고침 하기</div>\n                <h2>종합 출석 리스트</h2>\n                <div style={{ display: 'flex' }}>\n                    <span style={{\n                        marginRight: '1rem',\n                        padding: '0.5rem',\n                        color: 'black',\n                        backgroundColor: \"#FFFF8C\",\n                        borderRadius: '30px'\n                    }}>출석</span>\n                    <span style={{\n                        marginRight: '1rem',\n                        padding: '0.5rem',\n                        color: 'black',\n                        backgroundColor: \"#FFD732\",\n                        borderRadius: '30px'\n                    }}>지각</span>\n                    <span style={{\n                        padding: '0.5rem',\n                        color: 'black',\n                        backgroundColor: \"#FF3232\",\n                        borderRadius: '30px'\n                    }}>결석</span>\n                </div>\n            </header>\n\n            <div style={{\n                width: '70%',\n                height: '500px',\n                overflow: 'auto'\n            }}>\n                <ul className=\"Header_Container\">\n                    <li className=\"Header_list\">이름 / 스케줄</li>\n                    {renderScheduleList(Schedule)}\n                </ul>\n\n                <ul className=\"UserState_Container\">\n                    {renderUserStateList(User)}\n                </ul>\n            </div>\n\n            {/* Table로 짰다가 반응형 안되서 갖다버림 */}\n            {/* <div style={{ textAlign: 'center', width: '1000px', height: '600px', overflow: 'scroll' }}>\n                <table style={{ width: \"100%\", height: '80vh', overflow: 'auto' }} hover responsive>\n                    <thead>\n                        <tr>\n                            <th style={{ width: '100px', display: Schedule.length <= 0 && 'none', borderBottom: '2px solid #e4e4e4', borderRight: '2px solid #e4e4e4' }}> 이름 / 스케줄</th>\n                            {renderScheduleList(Schedule)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {renderUserStateList(User)}\n                    </tbody>\n                </table>\n            </div > */}\n        </>\n\n    );\n}\n\nexport default AttendList;\n","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/schedule_action.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/auth_reducer.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/index.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SidePanel.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/auth_action.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/AuthPage/AuthPage.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPage.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/index.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/types.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/firebase.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideHeader.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideList.js",["113","114","115","116","117"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSchedule } from '../../../redux/actions/schedule_action'\n\nimport firebase from '../../../firebase'\n\n// import moment from 'moment'\n// design\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { FaRegCalendarPlus } from 'react-icons/fa';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\nimport { DatePicker } from 'antd';\n\n\nconst SideList = () => {\n    // Modal Page \n    const [show, setShow] = useState(false); // 일정 생성\n    const [Usershow, setUsershow] = useState(false); // 유저 생성\n\n    // 스케줄 들어갈 값\n    const [Datetime, setDatetime] = useState(\"\");\n    const [Description, setDescription] = useState(\"\");\n\n    const [Users, setUsers] = useState([]); // 스케줄에 넣을 학생리스트\n    // 유저 정보 들어갈 값\n    const [Class, setClass] = useState(''); // 학번\n    const [Username, setUsername] = useState(''); // 유저 이름\n    const [Department, setDepartment] = useState(''); // 학과 이름\n    const [Callnumber, setCallnumber] = useState(''); // 휴대폰 번호\n    // const [Attendance, setAttendance] = useState(); // 출석 여부 체크, users 하위에 추가함.\n\n    const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\"))\n    // const [AttendanceRef, setAttendanceRef] = useState(firebase.database().ref(\"attendance\"))\n\n    // 스케줄\n    const [ScheduleRef, setScheduleRef] = useState(firebase.database().ref(\"Schedule\"));\n\n    const [Schedule, setSchedule] = useState([]);\n    // 현재 선택 된 스케줄\n    const [ActiveScheduleId, setActiveScheduleId] = useState(\"\")\n\n    // Modal Page [일정 생성]\n    const handleClose1 = () => setShow(false);\n    const handleShow1 = () => setShow(true);\n\n    // Modal Page [유저 생성]\n    const handleClose2 = () => setUsershow(false);\n    const handleShow2 = () => setUsershow(true);\n\n\n    const dispatch = useDispatch();\n\n\n    // 폼 유효성\n    const isScheduleFormVaild = (dt, desc) => dt && desc; // 스케줄 폼\n    const isUserFormVaild = (cl, username, department, callnumber) =>\n        cl && username && department && callnumber;\n\n    // 스케줄 생성\n    const handleScheduleSubmit = (e) => {\n        e.preventDefault();\n        // 제대로 값이 들어갔을때만 실행함.\n        if (isScheduleFormVaild(Datetime, Description)) {\n            addSchedule();\n        }\n    }\n\n    const handleUserSubmit = (e) => {\n        e.preventDefault();\n        if (isUserFormVaild(Class, Username, Department, Callnumber)) {\n            addUser();\n        }\n    }\n\n    const changeSchedule = (schedule) => {\n        dispatch(setCurrentSchedule(schedule))\n        setActiveScheduleId(schedule.id)\n    }\n\n\n    const AddScheduleListeners = async () => {\n        let SchedulesArray = [];\n        let UsersArray = [];\n        await ScheduleRef.on(\"child_added\", DataSnapshot => {\n            SchedulesArray.push(DataSnapshot.val());\n            // 날짜, 월, 년 순으로 완전 정렬\n            SchedulesArray.sort(function (a, b) {\n                return parseInt(a.day) - parseInt(b.day)\n            })\n            SchedulesArray.sort(function (a, b) {\n                return parseInt(a.month) - parseInt(b.month)\n            })\n            SchedulesArray.sort(function (a, b) {\n                return parseInt(a.year) - parseInt(b.year)\n            })\n            setSchedule(SchedulesArray);\n        })\n        UserRef.on(\"child_added\", DataSnapshot => {\n            UsersArray.push(DataSnapshot.val());\n            setUsers(UsersArray);\n        })\n    }\n\n\n\n\n    // 게속 실행\n    useEffect(() => {\n        AddScheduleListeners();\n        // 컴포넌트 제거\n\n    }, [])\n\n    // 스케줄 출력하기\n    const renderScheduleList = (Schedules) =>\n        Schedules.length > 0 &&\n        Schedules.map(schedule => (\n            <ListGroup.Item\n                key={schedule.id}\n                style={{ backgroundColor: ActiveScheduleId === schedule.id && \"#e4e4e4\" }}\n                onClick={() => changeSchedule(schedule)}\n            >\n                <span style={{\n                    fontSize: '20px',\n                    display: 'block',\n                    margin: 0\n                }}>{schedule.Description}</span>\n\n                <span style={{\n                    fontSize: '12px'\n                }}>{schedule.year}-{schedule.month}-{schedule.day}\n                </span></ListGroup.Item >\n        ))\n\n    // 세션 일정 추가 함수\n    const addSchedule = async () => {\n        const key = ScheduleRef.push().key;\n        const newSchedule = {\n            year: Datetime.substring(0, 4),\n            month: Datetime.substring(5, 7),\n            day: Datetime.substring(8, 10),\n            Description: Description,\n            id: key\n        }\n        try {\n            await ScheduleRef.child(key).update(newSchedule)\n            setShow(false); // modal 창 닫기\n\n            // 세션 일정 입력한 거 다 초기화하기\n            setDatetime(\"\");\n            setUsers([]);\n            setDescription(\"\");\n        } catch (error) {\n            alert(error)\n        }\n    }\n\n    // 유저 추가하기\n    const addUser = async () => {\n        const key = UserRef.push().key;\n        const newAddUser = {\n            id: key,\n            Class: Class,\n            Username: Username,\n            Department: Department,\n            Callnumber: Callnumber,\n        }\n        try {\n            await UserRef.child(key).update(newAddUser)\n            // 만들어진 스케줄ref에 업데이트하여 스케줄값 추가\n            setUsershow(false); // modal 창 닫기\n            // 세션 일정 입력한 거 다 초기화하기\n            setClass(\"\");\n            setUsername(\"\");\n            setDepartment(\"\");\n            setCallnumber(\"\");\n        } catch (error) {\n            alert(error)\n        }\n    }\n\n\n\n\n\n    return (\n        <div className=\"SideList\">\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <h4 style={{ color: 'white' }}>일정 리스트</h4>\n                <div>\n                    <FaRegCalendarPlus\n                        style={{\n                            fontSize: '30px',\n                            color: 'white'\n                        }}\n                        onClick={handleShow1}\n                    />\n                    <AiOutlineUserAdd\n                        style={{\n                            fontSize: '30px',\n                            color: 'white'\n                        }}\n                        onClick={handleShow2}\n                    />\n                </div>\n                <Modal show={show} onHide={handleClose1}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>세션 일정 생성</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>세션 일정</Form.Label>\n                                <br />\n                                <DatePicker onChange={(val) => {\n                                    setDatetime(val.format(\"YYYY-MM-DD\"))\n                                }} />\n                                <br />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    세션 주제\n                                </Form.Label>\n                                <Form.Control type=\"text\" onChange={(e) => {\n                                    setDescription(e.target.value)\n                                }} placeholder=\"세션 주제를 입력하세요.\" />\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose1}>\n                            취소\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleScheduleSubmit}>\n                            일정 생성하기\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                {/* 유저 생성 modal 창 */}\n                <Modal show={Usershow} onHide={handleClose2}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>유저 생성</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n\n                        {/* Form */}\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>\n                                    학번\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                    onChange={(e) => {\n                                        setClass(e.target.value)\n                                    }} placeholder='학번(16,17)을 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    멤버 이름\n                                </Form.Label>\n                                <Form.Control\n                                    onChange={(e) => {\n                                        setUsername(e.target.value)\n                                    }} type=\"text\" placeholder='이름을 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    학과\n                                </Form.Label>\n                                <Form.Control\n                                    onChange={(e) => {\n                                        setDepartment(e.target.value)\n                                    }} type=\"text\" placeholder='학과를 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    전화 번호\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    onChange={(e) => {\n                                        setCallnumber(e.target.value)\n                                    }} placeholder='전화번호을 입력해주세요.' />\n                            </Form.Group>\n                        </Form>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose2}>\n                            취소\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleUserSubmit}>\n                            멤버 추가하기\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n            <ListGroup style={{ maxHeight: '500px', overflowY: 'auto' }}>\n                {renderScheduleList(Schedule)}\n            </ListGroup>\n        </div >\n    );\n}\n\nexport default SideList;\n","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainHeader.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":25},{"ruleId":"122","severity":1,"message":"126","line":5,"column":8,"nodeType":"124","messageId":"125","endLine":5,"endColumn":16},{"ruleId":"122","severity":1,"message":"127","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":19},{"ruleId":"118","replacedBy":"128"},{"ruleId":"120","replacedBy":"129"},{"ruleId":"122","severity":1,"message":"130","line":10,"column":21,"nodeType":"124","messageId":"125","endLine":10,"endColumn":31},{"ruleId":"122","severity":1,"message":"131","line":14,"column":27,"nodeType":"124","messageId":"125","endLine":14,"endColumn":43},{"ruleId":"122","severity":1,"message":"132","line":15,"column":29,"nodeType":"124","messageId":"125","endLine":15,"endColumn":47},{"ruleId":"133","severity":1,"message":"134","line":83,"column":68,"nodeType":"135","messageId":"136","endLine":83,"endColumn":70},{"ruleId":"133","severity":1,"message":"134","line":83,"column":77,"nodeType":"135","messageId":"136","endLine":83,"endColumn":79},{"ruleId":"133","severity":1,"message":"137","line":83,"column":77,"nodeType":"135","messageId":"136","endLine":83,"endColumn":79},{"ruleId":"133","severity":1,"message":"137","line":83,"column":106,"nodeType":"135","messageId":"136","endLine":83,"endColumn":108},{"ruleId":"133","severity":1,"message":"137","line":83,"column":118,"nodeType":"135","messageId":"136","endLine":83,"endColumn":120},{"ruleId":"133","severity":1,"message":"137","line":83,"column":147,"nodeType":"135","messageId":"136","endLine":83,"endColumn":149},{"ruleId":"138","severity":1,"message":"139","line":93,"column":8,"nodeType":"140","endLine":93,"endColumn":34,"suggestions":"141"},{"ruleId":"122","severity":1,"message":"131","line":6,"column":27,"nodeType":"124","messageId":"125","endLine":6,"endColumn":43},{"ruleId":"122","severity":1,"message":"130","line":7,"column":21,"nodeType":"124","messageId":"125","endLine":7,"endColumn":31},{"ruleId":"122","severity":1,"message":"142","line":8,"column":25,"nodeType":"124","messageId":"125","endLine":8,"endColumn":39},{"ruleId":"138","severity":1,"message":"143","line":57,"column":8,"nodeType":"140","endLine":57,"endColumn":25,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"134","line":64,"column":30,"nodeType":"135","messageId":"136","endLine":64,"endColumn":32},{"ruleId":"133","severity":1,"message":"134","line":68,"column":12,"nodeType":"135","messageId":"136","endLine":68,"endColumn":14},{"ruleId":"133","severity":1,"message":"134","line":85,"column":78,"nodeType":"135","messageId":"136","endLine":85,"endColumn":80},{"ruleId":"133","severity":1,"message":"134","line":86,"column":41,"nodeType":"135","messageId":"136","endLine":86,"endColumn":43},{"ruleId":"133","severity":1,"message":"137","line":86,"column":41,"nodeType":"135","messageId":"136","endLine":86,"endColumn":43},{"ruleId":"133","severity":1,"message":"137","line":86,"column":81,"nodeType":"135","messageId":"136","endLine":86,"endColumn":83},{"ruleId":"133","severity":1,"message":"137","line":87,"column":41,"nodeType":"135","messageId":"136","endLine":87,"endColumn":43},{"ruleId":"133","severity":1,"message":"137","line":87,"column":81,"nodeType":"135","messageId":"136","endLine":87,"endColumn":83},{"ruleId":"122","severity":1,"message":"145","line":2,"column":23,"nodeType":"124","messageId":"125","endLine":2,"endColumn":34},{"ruleId":"122","severity":1,"message":"146","line":27,"column":12,"nodeType":"124","messageId":"125","endLine":27,"endColumn":17},{"ruleId":"122","severity":1,"message":"130","line":35,"column":21,"nodeType":"124","messageId":"125","endLine":35,"endColumn":31},{"ruleId":"122","severity":1,"message":"142","line":39,"column":25,"nodeType":"124","messageId":"125","endLine":39,"endColumn":39},{"ruleId":"138","severity":1,"message":"147","line":115,"column":8,"nodeType":"140","endLine":115,"endColumn":10,"suggestions":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'renderEmpty' is defined but never used.",["149"],["150"],"'setUserRef' is assigned a value but never used.","'setAttendanceRef' is assigned a value but never used.","'setSearchAttendRef' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'SearchState' and 'addUserListeners'. Either include them or remove the dependency array.","ArrayExpression",["151"],"'setScheduleRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addAttendanceListeners', 'addScheduleListeners', and 'addUserListeners'. Either include them or remove the dependency array.",["152"],"'useSelector' is defined but never used.","'Users' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'AddScheduleListeners'. Either include it or remove the dependency array.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [schedule, IsLoadingState, addUserListeners, SearchState]",{"range":"160","text":"161"},"Update the dependencies array to be: [addAttendanceListeners, addScheduleListeners, addUserListeners, isReLoadingList]",{"range":"162","text":"163"},"Update the dependencies array to be: [AddScheduleListeners]",{"range":"164","text":"165"},[3617,3643],"[schedule, IsLoadingState, addUserListeners, SearchState]",[1849,1866],"[addAttendanceListeners, addScheduleListeners, addUserListeners, isReLoadingList]",[3636,3638],"[AddScheduleListeners]"]