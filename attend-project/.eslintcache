[{"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SidePanel.js":"1","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/schedule_action.js":"2","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/index.js":"3","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/schedule_reducer.js":"4","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/App.js":"5","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/AuthPage/AuthPage.js":"6","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/index.js":"7","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainPanel.js":"8","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainHeader.js":"9","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideHeader.js":"10","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideList.js":"11","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/types.js":"12","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPage.js":"13","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/firebase.js":"14","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideFooter.js":"15","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainList.js":"16"},{"size":377,"mtime":1610785972678,"results":"17","hashOfConfig":"18"},{"size":230,"mtime":1610813228379,"results":"19","hashOfConfig":"18"},{"size":168,"mtime":1610813431584,"results":"20","hashOfConfig":"18"},{"size":467,"mtime":1610895883505,"results":"21","hashOfConfig":"18"},{"size":424,"mtime":1610813669773,"results":"22","hashOfConfig":"18"},{"size":151,"mtime":1610813688511,"results":"23","hashOfConfig":"18"},{"size":942,"mtime":1610807417578,"results":"24","hashOfConfig":"18"},{"size":1071,"mtime":1610984921361,"results":"25","hashOfConfig":"18"},{"size":484,"mtime":1610985678257,"results":"26","hashOfConfig":"18"},{"size":447,"mtime":1610896715526,"results":"27","hashOfConfig":"18"},{"size":10769,"mtime":1611031658802,"results":"28","hashOfConfig":"18"},{"size":59,"mtime":1610813311974,"results":"29","hashOfConfig":"18"},{"size":751,"mtime":1610985756191,"results":"30","hashOfConfig":"18"},{"size":563,"mtime":1610781582091,"results":"31","hashOfConfig":"18"},{"size":301,"mtime":1610902348769,"results":"32","hashOfConfig":"18"},{"size":4279,"mtime":1611072057172,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"sqdhbq",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SidePanel.js",[],["70","71"],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/schedule_action.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/index.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/reducers/schedule_reducer.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/App.js",[],["72","73"],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/AuthPage/AuthPage.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/index.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainPanel.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainHeader.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideHeader.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideList.js",["74","75","76","77"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentSchedule } from '../../../redux/actions/schedule_action'\n\nimport firebase from '../../../firebase'\nimport 'moment/locale/ko'\nimport moment from 'moment'\n// design\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { FaRegCalendarPlus } from 'react-icons/fa';\nimport { AiOutlineUserAdd } from 'react-icons/ai';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\nimport { DatePicker } from 'antd';\n\n\nconst SideList = () => {\n    // Modal Page \n    const [show, setShow] = useState(false); // 일정 생성\n    const [Usershow, setUsershow] = useState(false); // 유저 생성\n\n    // 스케줄 들어갈 값\n    const [Datetime, setDatetime] = useState(moment);\n    const [Description, setDescription] = useState(\"\");\n\n    const [Users, setUsers] = useState([]); // 스케줄에 넣을 학생리스트\n    // 유저 정보 들어갈 값\n    const [Class, setClass] = useState(''); // 학번\n    const [Username, setUsername] = useState(''); // 유저 이름\n    const [Department, setDepartment] = useState(''); // 학과 이름\n    const [Callnumber, setCallnumber] = useState(''); // 휴대폰 번호\n    // const [Attendance, setAttendance] = useState(); // 출석 여부 체크, users 하위에 추가함.\n\n    const [UserRef, setUserRef] = useState(firebase.database().ref(\"Users\"))\n    // const [AttendanceRef, setAttendanceRef] = useState(firebase.database().ref(\"attendance\"))\n\n    // 스케줄\n    const [ScheduleRef, setScheduleRef] = useState(firebase.database().ref(\"Schedule\"));\n\n    const [Schedule, setSchedule] = useState([]);\n    // 현재 선택 된 스케줄\n    const [ActiveScheduleId, setActiveScheduleId] = useState(\"\")\n\n    // Modal Page [일정 생성]\n    const handleClose1 = () => setShow(false);\n    const handleShow1 = () => setShow(true);\n\n    // Modal Page [유저 생성]\n    const handleClose2 = () => setUsershow(false);\n    const handleShow2 = () => setUsershow(true);\n\n\n    const dispatch = useDispatch();\n\n\n    // 폼 유효성\n    const isScheduleFormVaild = (dt, desc) => dt && desc; // 스케줄 폼\n    const isUserFormVaild = (cl, username, department, callnumber) =>\n        cl && username && department && callnumber;\n\n    // 스케줄 생성\n    const handleScheduleSubmit = (e) => {\n        e.preventDefault();\n        // 제대로 값이 들어갔을때만 실행함.\n        if (isScheduleFormVaild(Datetime, Description)) {\n            addSchedule();\n        }\n    }\n\n    const handleUserSubmit = (e) => {\n        e.preventDefault();\n        if (isUserFormVaild(Class, Username, Department, Callnumber)) {\n            addUser();\n        }\n    }\n\n    const changeSchedule = (schedule) => {\n        dispatch(setCurrentSchedule(schedule))\n        setActiveScheduleId(schedule.id)\n    }\n\n\n    const AddScheduleListeners = async () => {\n        let SchedulesArray = [];\n        let UsersArray = [];\n        await ScheduleRef.on(\"child_added\", DataSnapshot => {\n            SchedulesArray.push(DataSnapshot.val());\n            setSchedule(SchedulesArray);\n        })\n        UserRef.on(\"child_added\", DataSnapshot => {\n            UsersArray.push(DataSnapshot.val());\n            setUsers(UsersArray);\n        })\n    }\n\n\n\n\n    // 게속 실행\n    useEffect(() => {\n        AddScheduleListeners();\n        // 컴포넌트 제거\n        return (() => {\n            ScheduleRef.off();\n        })\n    }, [])\n\n    // 스케줄 출력하기\n    const renderScheduleList = (Schedules) =>\n        Schedules.length > 0 &&\n        Schedules.map(schedule => (\n            <ListGroup.Item\n                key={schedule.id}\n                style={{ backgroundColor: ActiveScheduleId === schedule.id && \"#e4e4e4\" }}\n                onClick={() => changeSchedule(schedule)}\n            > {schedule.Datetime}{\" \"}[{schedule.Description}]</ListGroup.Item >\n        ))\n\n    // 세션 일정 추가 함수\n    const addSchedule = () => {\n        const key = ScheduleRef.push().key;\n        const newSchedule = {\n            Datetime: Datetime,\n            Description: Description,\n            id: key,\n            Users\n        }\n        try {\n            ScheduleRef.child(key).update(newSchedule)\n            setShow(false); // modal 창 닫기\n\n            // 세션 일정 입력한 거 다 초기화하기\n            setDatetime(moment);\n            setUsers([]);\n            setDescription(\"\");\n        } catch (error) {\n            alert(error)\n        }\n    }\n\n    // 유저 추가하기\n    const addUser = async () => {\n        const key = UserRef.push().key;\n        const newAddUser = {\n            id: key,\n            Class: Class,\n            Username: Username,\n            Department: Department,\n            Callnumber: Callnumber,\n        }\n        try {\n            await UserRef.child(key).update(newAddUser)\n            // 만들어진 스케줄ref에 업데이트하여 스케줄값 추가\n            setUsershow(false); // modal 창 닫기\n            // 세션 일정 입력한 거 다 초기화하기\n            setClass(\"\");\n            setUsername(\"\");\n            setDepartment(\"\");\n            setCallnumber(\"\");\n        } catch (error) {\n            alert(error)\n        }\n    }\n\n\n\n\n\n    return (\n        <div className=\"SideList\">\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <h4 style={{ color: 'white' }}>일정 리스트</h4>\n                <div>\n                    <FaRegCalendarPlus\n                        style={{\n                            fontSize: '30px',\n                            color: 'white'\n                        }}\n                        onClick={handleShow1}\n                    />\n                    <AiOutlineUserAdd\n                        style={{\n                            fontSize: '30px',\n                            color: 'white'\n                        }}\n                        onClick={handleShow2}\n                    />\n                </div>\n                <Modal show={show} onHide={handleClose1}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>세션 일정 생성</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>세션 일정</Form.Label>\n                                <br />\n                                <DatePicker onChange={(val) => {\n                                    setDatetime(val.format(\"MMMM Do, a h시 mm분\"))\n                                }} showTime format=\"MM월 DD일 h시 m분 a\" />\n                                <br />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    세션 주제\n                                </Form.Label>\n                                <Form.Control type=\"text\" onChange={(e) => {\n                                    setDescription(e.target.value)\n                                }} placeholder=\"세션 주제를 입력하세요.\" />\n                            </Form.Group>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose1}>\n                            취소\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleScheduleSubmit}>\n                            일정 생성하기\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n                {/* 유저 생성 modal 창 */}\n                <Modal show={Usershow} onHide={handleClose2}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>유저 생성</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n\n                        {/* Form */}\n                        <Form>\n                            <Form.Group>\n                                <Form.Label>\n                                    학번\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                    onChange={(e) => {\n                                        setClass(e.target.value)\n                                    }} placeholder='학번(16,17)을 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    멤버 이름\n                                </Form.Label>\n                                <Form.Control\n                                    onChange={(e) => {\n                                        setUsername(e.target.value)\n                                    }} type=\"text\" placeholder='이름을 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    학과\n                                </Form.Label>\n                                <Form.Control\n                                    onChange={(e) => {\n                                        setDepartment(e.target.value)\n                                    }} type=\"text\" placeholder='학과를 입력해주세요.' />\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    전화 번호\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    onChange={(e) => {\n                                        setCallnumber(e.target.value)\n                                    }} placeholder='전화번호을 입력해주세요.' />\n                            </Form.Group>\n                        </Form>\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose2}>\n                            취소\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleUserSubmit}>\n                            일정 생성하기\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n\n            </div>\n            <ListGroup>\n                {renderScheduleList(Schedule)}\n            </ListGroup>\n        </div >\n    );\n}\n\nexport default SideList;\n","/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/redux/actions/types.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPage.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/firebase.js",[],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/SidePanel/SideFooter.js",[],["78","79"],"/Users/minseok/Desktop/Likelion_9th_Attendance/attend-project/src/components/MainPage/MainPanel/MainList.js",["80","81","82","83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"84","replacedBy":"88"},{"ruleId":"86","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":34},{"ruleId":"90","severity":1,"message":"94","line":35,"column":21,"nodeType":"92","messageId":"93","endLine":35,"endColumn":31},{"ruleId":"90","severity":1,"message":"95","line":39,"column":25,"nodeType":"92","messageId":"93","endLine":39,"endColumn":39},{"ruleId":"96","severity":1,"message":"97","line":107,"column":8,"nodeType":"98","endLine":107,"endColumn":10,"suggestions":"99"},{"ruleId":"84","replacedBy":"100"},{"ruleId":"86","replacedBy":"101"},{"ruleId":"90","severity":1,"message":"94","line":10,"column":21,"nodeType":"92","messageId":"93","endLine":10,"endColumn":31},{"ruleId":"90","severity":1,"message":"102","line":14,"column":27,"nodeType":"92","messageId":"93","endLine":14,"endColumn":43},{"ruleId":"90","severity":1,"message":"103","line":15,"column":29,"nodeType":"92","messageId":"93","endLine":15,"endColumn":47},{"ruleId":"96","severity":1,"message":"104","line":88,"column":8,"nodeType":"98","endLine":88,"endColumn":30,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],["106"],["107"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'setUserRef' is assigned a value but never used.","'setScheduleRef' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AddScheduleListeners' and 'ScheduleRef'. Either include them or remove the dependency array.","ArrayExpression",["108"],["106"],["107"],"'setAttendanceRef' is assigned a value but never used.","'setSearchAttendRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'SearchState' and 'addUserListeners'. Either include them or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [AddScheduleListeners, ScheduleRef]",{"range":"114","text":"115"},"Update the dependencies array to be: [schedule, SearchUser, addUserListeners, SearchState]",{"range":"116","text":"117"},[3321,3323],"[AddScheduleListeners, ScheduleRef]",[3240,3262],"[schedule, SearchUser, addUserListeners, SearchState]"]